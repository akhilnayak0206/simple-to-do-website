{"version":3,"sources":["reducers/task.js","reducers/filteredTask.js","reducers/index.js","actions/types.js","store.js","actions/OnAdd.js","actions/OnFilterTask.js","actions/OnEdit.js","actions/OnDelete.js","Components/GroupSearchDiv.js","Components/ShowModalView.js","Components/AllTask.js","Components/TaskListMain.js","Components/AddTaskButton.js","App.js","serviceWorker.js","index.js"],"names":["initialState","groupBy","search","currentStatus","combineReducers","task","state","action","type","payload","filter","obj","id","i","length","filteredTask","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","OnAdd","data","dispatch","OnFilterTask","OnEdit","OnDelete","connect","menu","onClick","e","key","Item","className","Button","overlay","icon","DownOutlined","replace","str","toUpperCase","placeholder","value","allowClear","onChange","target","TextArea","Input","ShowModalView","taskProps","maxLength","title","disabled","description","format","dueDate","moment","priority","useState","listTask","setListTask","summarySort","setSummarySort","prioritySort","setPrioritySort","createdOnSort","setCreatedOnSort","dueBySort","setDueBySort","groupByPrevState","setGroupByPrevState","groupArray","setGroupArray","searchPrevState","setSearchPrevState","currentStatusPrevState","setCurrentStatusPrevState","editModal","setEditModal","showViewModal","setShowViewModal","selectedTask","setSelectedTask","editModalObj","setEditModalObj","useEffect","sortedTask","currentState","sort","a","b","Number","some","element","message","success","allHeaderArray","map","t","push","createdAt","aa","split","reverse","join","bb","uniq","Set","indexOf","onSorting","val","sortVar","localeCompare","prevState","visible","onOk","onCancel","style","width","ColumnHeightOutlined","textDecoration","footer","dateString","EditOutlined","backgroundColor","color","shape","onConfirm","okText","cancelText","DeleteOutlined","groupHeader","k","TabPane","Tabs","defaultActiveKey","tab","modalVisible","setModalVisible","modalLoading","setModalLoading","addTask","setAddTask","handleSaveModal","error","formattedDate","Date","now","toLocaleDateString","dataToAdd","toString","size","PlusOutlined","confirmLoading","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.9bb112b0.chunk.js","sourcesContent":["import { ON_EDIT_TASK, ON_ADD_TASK, ON_DELETE_TASK } from '../actions/types';\r\n\r\nconst initialState = [];\r\n\r\nexport default function (state = initialState, action) {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case ON_ADD_TASK:\r\n      return [...state, payload];\r\n    case ON_DELETE_TASK: {\r\n      state = state.filter((obj) => {\r\n        return obj.id !== payload.id;\r\n      });\r\n      return [...state];\r\n    }\r\n    case ON_EDIT_TASK: {\r\n      for (let i = 0; i < state.length; i++) {\r\n        if (state[i].id === payload.id) {\r\n          state[i] = payload;\r\n          break;\r\n        }\r\n      }\r\n      return [...state];\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { ON_FILTER_TASK } from '../actions/types';\r\n\r\nconst initialState = { groupBy: 'none', search: '', currentStatus: 'all' };\r\n\r\nexport default function (state = initialState, action) {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case ON_FILTER_TASK:\r\n      return { ...state, ...payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport task from './task';\r\nimport filteredTask from './filteredTask';\r\n\r\nexport default combineReducers({\r\n  task,\r\n  filteredTask,\r\n});\r\n","export const ON_LIST_TASK = 'ON_LIST_TASK';\r\nexport const ON_FILTER_TASK = 'ON_FILTER_TASK';\r\nexport const ON_ADD_TASK = 'ON_ADD_TASK';\r\nexport const ON_DELETE_TASK = 'ON_DELETE_TASK';\r\nexport const ON_EDIT_TASK = 'ON_EDIT_TASK';\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n","import { ON_ADD_TASK } from './types';\r\n\r\nconst OnAdd = (data) => (dispatch) => {\r\n  return dispatch({\r\n    type: ON_ADD_TASK,\r\n    payload: data,\r\n  });\r\n};\r\n\r\nexport default OnAdd;\r\n","import { ON_FILTER_TASK } from './types';\r\n\r\nconst OnFilterTask = (payload) => (dispatch) => {\r\n  return dispatch({\r\n    type: ON_FILTER_TASK,\r\n    payload,\r\n  });\r\n};\r\n\r\nexport default OnFilterTask;\r\n","import { ON_EDIT_TASK } from './types';\r\n\r\nconst OnEdit = (data) => (dispatch) => {\r\n  return dispatch({\r\n    type: ON_EDIT_TASK,\r\n    payload: data,\r\n  });\r\n};\r\n\r\nexport default OnEdit;\r\n","import { ON_DELETE_TASK } from './types';\r\n\r\nconst OnDelete = (payload) => (dispatch) => {\r\n  dispatch({\r\n    type: ON_DELETE_TASK,\r\n    payload,\r\n  });\r\n};\r\n\r\nexport default OnDelete;\r\n","import React from 'react';\r\n\r\n//styles\r\nimport '../App.css';\r\n\r\n// ant design ui\r\nimport { Input, Menu, Dropdown } from 'antd';\r\nimport { DownOutlined } from '@ant-design/icons';\r\n\r\n// redux\r\nimport { connect } from 'react-redux';\r\n// actions\r\nimport { OnFilterTask } from '../actions/actions';\r\n\r\nconst GroupSearchDiv = ({ OnFilterTask, filteredTask }) => {\r\n  const handleMenuClick = (e) => {\r\n    OnFilterTask({ groupBy: e.key });\r\n  };\r\n\r\n  const menu = (\r\n    <Menu onClick={handleMenuClick}>\r\n      <Menu.Item key='none'>None</Menu.Item>\r\n      <Menu.Item key='createdOn'>Created On</Menu.Item>\r\n      <Menu.Item key='pending'>Pending On</Menu.Item>\r\n      <Menu.Item key='priority'>Priority</Menu.Item>\r\n    </Menu>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <div className='groupByDiv'>\r\n        <h4>Group By</h4>\r\n        <Dropdown.Button overlay={menu} icon={<DownOutlined />}>\r\n          {filteredTask.groupBy\r\n            .replace(/([A-Z])/g, ' $1')\r\n            .replace(/^./, function (str) {\r\n              return str.toUpperCase();\r\n            })}\r\n        </Dropdown.Button>\r\n      </div>\r\n      <div className='searchBarDiv'>\r\n        <h4>Search</h4>\r\n        <Input\r\n          placeholder='Search Tasks'\r\n          value={filteredTask.search}\r\n          allowClear\r\n          onChange={(e) => OnFilterTask({ search: e.target.value })}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({ filteredTask: state.filteredTask });\r\n\r\nexport default connect(mapStateToProps, { OnFilterTask })(GroupSearchDiv);\r\n","import React from 'react';\r\n\r\n// style\r\nimport '../App.css';\r\n\r\n// ant design ui\r\nimport { Input, Dropdown, DatePicker } from 'antd';\r\nimport { DownOutlined } from '@ant-design/icons';\r\nimport moment from 'moment';\r\n\r\nconst { TextArea } = Input;\r\n\r\nconst ShowModalView = ({ taskProps }) => {\r\n  return (\r\n    <div className='addTaskModal'>\r\n      <p>Title</p>\r\n      <Input\r\n        placeholder='Add title here'\r\n        maxLength={140}\r\n        value={taskProps.title}\r\n        disabled\r\n      />\r\n      <p>Description</p>\r\n      <TextArea\r\n        placeholder='Add Description Here'\r\n        maxLength={500}\r\n        value={taskProps.description}\r\n        disabled\r\n      />\r\n      <div className='addTaskModalSingleRow'>\r\n        <div className='dueDateAddModal'>\r\n          <p>Due Date</p>\r\n          <DatePicker\r\n            format={'DD/MM/YYYY'}\r\n            value={\r\n              taskProps.dueDate ? moment(taskProps.dueDate, 'DD/MM/YYYY') : ''\r\n            }\r\n            disabled\r\n          />\r\n        </div>\r\n        <div className='priorityAddModal'>\r\n          <p>Priority</p>\r\n          <Dropdown.Button icon={<DownOutlined />} disabled>\r\n            {taskProps.priority}\r\n          </Dropdown.Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShowModalView;\r\n","import React, { Fragment, useEffect, useState } from 'react'; // eslint-disable-line\r\n\r\n// styles\r\nimport '../App.css';\r\n\r\nimport {\r\n  ColumnHeightOutlined,\r\n  EditOutlined,\r\n  DownOutlined,\r\n  DeleteOutlined,\r\n} from '@ant-design/icons';\r\n\r\n// redux\r\nimport { connect } from 'react-redux';\r\n// actions\r\nimport { OnEdit, OnFilterTask, OnDelete } from '../actions/actions';\r\n// ant design\r\nimport {\r\n  Menu,\r\n  Dropdown,\r\n  message,\r\n  Button,\r\n  Popconfirm,\r\n  Input,\r\n  Modal,\r\n  DatePicker,\r\n} from 'antd';\r\nimport moment from 'moment';\r\nimport ShowModalView from './ShowModalView';\r\nconst { TextArea } = Input;\r\n\r\nconst AllTask = ({ filteredTask, OnEdit, OnFilterTask, task, OnDelete }) => {\r\n  const [listTask, setListTask] = useState([]);\r\n  const [summarySort, setSummarySort] = useState(true);\r\n  const [prioritySort, setPrioritySort] = useState(true);\r\n  const [createdOnSort, setCreatedOnSort] = useState(true);\r\n  const [dueBySort, setDueBySort] = useState(true);\r\n  const [groupByPrevState, setGroupByPrevState] = useState('');\r\n  const [groupArray, setGroupArray] = useState([]);\r\n  const [searchPrevState, setSearchPrevState] = useState('');\r\n  const [currentStatusPrevState, setCurrentStatusPrevState] = useState('');\r\n  const [editModal, setEditModal] = useState(false);\r\n  const [showViewModal, setShowViewModal] = useState(false);\r\n  const [selectedTask, setSelectedTask] = useState({});\r\n  const [editModalObj, setEditModalObj] = useState({});\r\n\r\n  //   sort task based on all pending completed\r\n  useEffect(() => {\r\n    if (filteredTask.currentStatus === 'pending') {\r\n      let allTask = task.filter((e) => e.currentState === 'open');\r\n      let sortedTask = allTask.sort((a, b) => Number(b.id) - Number(a.id));\r\n      setListTask(sortedTask);\r\n    } else if (filteredTask.currentStatus === 'completed') {\r\n      let allTask = task.filter((e) => e.currentState === 'done');\r\n      let sortedTask = allTask.sort((a, b) => Number(b.id) - Number(a.id));\r\n      setListTask(sortedTask);\r\n    } else {\r\n      let sortedTask = task.sort((a, b) => Number(b.id) - Number(a.id));\r\n      setListTask(sortedTask);\r\n    }\r\n    if (editModal && task.some((element) => element.id === editModalObj.id)) {\r\n      setEditModal(false);\r\n      setEditModalObj({});\r\n      message.success('Task saved successfully');\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [task]);\r\n\r\n  //   filtered task\r\n  useEffect(() => {\r\n    if (filteredTask.groupBy !== groupByPrevState) {\r\n      if (filteredTask.groupBy === 'createdOn') {\r\n        let allHeaderArray = [];\r\n        task.map((t) => allHeaderArray.push(t.createdAt));\r\n        let sortedTask = allHeaderArray.sort((a, b) => {\r\n          let aa = a.split('/').reverse().join(),\r\n            bb = b.split('/').reverse().join();\r\n          return aa < bb ? -1 : aa > bb ? 1 : 0;\r\n        });\r\n        let uniq = [...new Set(sortedTask)];\r\n        setGroupArray(uniq);\r\n      }\r\n      if (filteredTask.groupBy === 'pending') {\r\n        let allHeaderArray = [];\r\n        task.map((t) => allHeaderArray.push(t.dueDate));\r\n        let sortedTask = allHeaderArray.sort((a, b) => {\r\n          let aa = a.split('/').reverse().join(),\r\n            bb = b.split('/').reverse().join();\r\n          return aa < bb ? -1 : aa > bb ? 1 : 0;\r\n        });\r\n        let uniq = [...new Set(sortedTask)];\r\n        setGroupArray(uniq);\r\n      }\r\n      if (filteredTask.groupBy === 'priority') {\r\n        setGroupArray(['high', 'medium', 'low', 'none']);\r\n      }\r\n      setGroupByPrevState(filteredTask.groupBy);\r\n    }\r\n    if (filteredTask.search !== searchPrevState) {\r\n      if (filteredTask.search) {\r\n        let sortedTask = task.filter((e) => {\r\n          if (\r\n            e.title.indexOf(filteredTask.search) !== -1 ||\r\n            e.priority.indexOf(filteredTask.search) !== -1 ||\r\n            e.description.indexOf(filteredTask.search) !== -1\r\n          ) {\r\n            return true;\r\n          } else {\r\n            return false;\r\n          }\r\n        });\r\n        setListTask(sortedTask);\r\n        setSearchPrevState(filteredTask.search);\r\n      } else {\r\n        let sortedTask = task.sort((a, b) => Number(b.id) - Number(a.id));\r\n        setListTask(sortedTask);\r\n        setSearchPrevState(filteredTask.search);\r\n      }\r\n    }\r\n    if (filteredTask.currentStatus !== currentStatusPrevState) {\r\n      if (filteredTask.currentStatus === 'pending') {\r\n        let allTask = task.filter((e) => e.currentState === 'open');\r\n        let sortedTask = allTask.sort((a, b) => Number(b.id) - Number(a.id));\r\n        setListTask(sortedTask);\r\n      } else if (filteredTask.currentStatus === 'completed') {\r\n        let allTask = task.filter((e) => e.currentState === 'done');\r\n        let sortedTask = allTask.sort((a, b) => Number(b.id) - Number(a.id));\r\n        setListTask(sortedTask);\r\n      } else {\r\n        let sortedTask = task.sort((a, b) => Number(b.id) - Number(a.id));\r\n        setListTask(sortedTask);\r\n      }\r\n      setCurrentStatusPrevState(filteredTask.currentStatus);\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [filteredTask]);\r\n\r\n  const onSorting = (val) => {\r\n    OnFilterTask({ groupBy: 'none', search: '' });\r\n    if (val.sortVar === 'summary') {\r\n      if (summarySort) {\r\n        let sortedTask = task.sort((a, b) => a.title.localeCompare(b.title));\r\n        setListTask(sortedTask);\r\n        setSummarySort((prevState) => !prevState);\r\n      } else {\r\n        let sortedTask = task.sort((a, b) => b.title.localeCompare(a.title));\r\n        setListTask(sortedTask);\r\n        setSummarySort((prevState) => !prevState);\r\n      }\r\n    }\r\n    if (val.sortVar === 'priority') {\r\n      if (prioritySort) {\r\n        let sortedTask = task.sort((a, b) => {\r\n          let aa =\r\n            a.priority === 'none'\r\n              ? 1\r\n              : a.priority === 'low'\r\n              ? 2\r\n              : a.priority === 'medium'\r\n              ? 3\r\n              : 4;\r\n          let bb =\r\n            b.priority === 'none'\r\n              ? 1\r\n              : b.priority === 'low'\r\n              ? 2\r\n              : b.priority === 'medium'\r\n              ? 3\r\n              : 4;\r\n          return aa - bb;\r\n        });\r\n        setListTask(sortedTask);\r\n        setPrioritySort((prevState) => !prevState);\r\n      } else {\r\n        let sortedTask = task.sort((a, b) => {\r\n          let aa =\r\n            a.priority === 'none'\r\n              ? 1\r\n              : a.priority === 'low'\r\n              ? 2\r\n              : a.priority === 'medium'\r\n              ? 3\r\n              : 4;\r\n          let bb =\r\n            b.priority === 'none'\r\n              ? 1\r\n              : b.priority === 'low'\r\n              ? 2\r\n              : b.priority === 'medium'\r\n              ? 3\r\n              : 4;\r\n          return bb - aa;\r\n        });\r\n        setListTask(sortedTask);\r\n        setPrioritySort((prevState) => !prevState);\r\n      }\r\n    }\r\n    if (val.sortVar === 'createdOn') {\r\n      if (createdOnSort) {\r\n        let sortedTask = task.sort((a, b) => {\r\n          let aa = a.createdAt.split('/').reverse().join(),\r\n            bb = b.createdAt.split('/').reverse().join();\r\n          return aa < bb ? -1 : aa > bb ? 1 : 0;\r\n        });\r\n        setListTask(sortedTask);\r\n        setCreatedOnSort((prevState) => !prevState);\r\n      } else {\r\n        let sortedTask = task.sort((a, b) => {\r\n          let aa = a.createdAt.split('/').reverse().join(),\r\n            bb = b.createdAt.split('/').reverse().join();\r\n          return aa > bb ? -1 : aa < bb ? 1 : 0;\r\n        });\r\n        setListTask(sortedTask);\r\n        setCreatedOnSort((prevState) => !prevState);\r\n      }\r\n    }\r\n    if (val.sortVar === 'dueBy') {\r\n      if (dueBySort) {\r\n        let sortedTask = task.sort((a, b) => {\r\n          let aa = a.dueDate.split('/').reverse().join(),\r\n            bb = b.dueDate.split('/').reverse().join();\r\n          return aa < bb ? -1 : aa > bb ? 1 : 0;\r\n        });\r\n        setListTask(sortedTask);\r\n        setDueBySort((prevState) => !prevState);\r\n      } else {\r\n        let sortedTask = task.sort((a, b) => {\r\n          let aa = a.dueDate.split('/').reverse().join(),\r\n            bb = b.dueDate.split('/').reverse().join();\r\n          return aa > bb ? -1 : aa < bb ? 1 : 0;\r\n        });\r\n        setListTask(sortedTask);\r\n        setDueBySort((prevState) => !prevState);\r\n      }\r\n    }\r\n  };\r\n\r\n  //   for edit task priority menu\r\n  function handleMenuClick(e) {\r\n    setEditModalObj((prevState) => ({\r\n      ...prevState,\r\n      priority: e.key,\r\n    }));\r\n  }\r\n\r\n  const menu = (\r\n    <Menu onClick={handleMenuClick}>\r\n      <Menu.Item key='none'>None</Menu.Item>\r\n      <Menu.Item key='low'>Low</Menu.Item>\r\n      <Menu.Item key='medium'>Medium</Menu.Item>\r\n      <Menu.Item key='high'>High</Menu.Item>\r\n    </Menu>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        title='Show Task'\r\n        visible={showViewModal}\r\n        onOk={() => {\r\n          setShowViewModal(false);\r\n          setSelectedTask({});\r\n        }}\r\n        onCancel={() => {\r\n          setShowViewModal(false);\r\n          setSelectedTask({});\r\n        }}\r\n      >\r\n        <ShowModalView taskProps={selectedTask} />\r\n      </Modal>\r\n      <table style={{ width: '100%' }}>\r\n        <tr>\r\n          <th>\r\n            <div className='flexCorner'>\r\n              Summary\r\n              <Button\r\n                type='primary'\r\n                icon={<ColumnHeightOutlined />}\r\n                onClick={() => onSorting({ sortVar: 'summary' })}\r\n              />\r\n            </div>\r\n          </th>\r\n          <th>\r\n            <div className='flexCorner'>\r\n              Priority\r\n              <Button\r\n                type='primary'\r\n                icon={<ColumnHeightOutlined />}\r\n                onClick={() => onSorting({ sortVar: 'priority' })}\r\n              />\r\n            </div>\r\n          </th>\r\n          <th>\r\n            <div className='flexCorner'>\r\n              Created On\r\n              <Button\r\n                type='primary'\r\n                icon={<ColumnHeightOutlined />}\r\n                onClick={() => onSorting({ sortVar: 'createdOn' })}\r\n              />\r\n            </div>\r\n          </th>\r\n          <th>\r\n            <div className='flexCorner'>\r\n              Due By\r\n              <Button\r\n                type='primary'\r\n                icon={<ColumnHeightOutlined />}\r\n                onClick={() => onSorting({ sortVar: 'dueBy' })}\r\n              />\r\n            </div>\r\n          </th>\r\n          <th>\r\n            <div className='flexCorner'>Actions</div>\r\n          </th>\r\n        </tr>\r\n        {groupByPrevState === 'none' || ''\r\n          ? listTask.map((element, key) => (\r\n              <tr\r\n                key={key}\r\n                style={\r\n                  element.currentState === 'done'\r\n                    ? { textDecoration: 'line-through' }\r\n                    : {}\r\n                }\r\n              >\r\n                <td\r\n                  onClick={() => {\r\n                    setShowViewModal(true);\r\n                    setSelectedTask(element);\r\n                  }}\r\n                >\r\n                  {element.title}\r\n                </td>\r\n                <td\r\n                  onClick={() => {\r\n                    setShowViewModal(true);\r\n                    setSelectedTask(element);\r\n                  }}\r\n                >\r\n                  {element.priority}\r\n                </td>\r\n                <td\r\n                  onClick={() => {\r\n                    setShowViewModal(true);\r\n                    setSelectedTask(element);\r\n                  }}\r\n                >\r\n                  {element.createdAt}\r\n                </td>\r\n                <td\r\n                  onClick={() => {\r\n                    setShowViewModal(true);\r\n                    setSelectedTask(element);\r\n                  }}\r\n                >\r\n                  {element.dueDate}\r\n                </td>\r\n                <td>\r\n                  <div className='flexEvenly'>\r\n                    <Modal\r\n                      title='Edit Task'\r\n                      visible={editModal}\r\n                      onOk={() => OnEdit({ ...editModalObj })}\r\n                      onCancel={() => setEditModal(false)}\r\n                      footer={[\r\n                        <Button\r\n                          key='back'\r\n                          type='ghost'\r\n                          onClick={() => setEditModal(false)}\r\n                        >\r\n                          Cancel\r\n                        </Button>,\r\n                        <Button\r\n                          key='submit'\r\n                          type='primary'\r\n                          onClick={() => OnEdit({ ...editModalObj })}\r\n                        >\r\n                          Save\r\n                        </Button>,\r\n                      ]}\r\n                      className='addTaskModal'\r\n                    >\r\n                      <p>Title</p>\r\n                      <Input\r\n                        allowClear\r\n                        onChange={(e) =>\r\n                          setEditModalObj((prevState) => ({\r\n                            ...prevState,\r\n                            title: e.target.value,\r\n                          }))\r\n                        }\r\n                        maxLength={140}\r\n                        value={editModalObj.title}\r\n                      />\r\n                      <p>Description</p>\r\n                      <TextArea\r\n                        placeholder='Add Description Here'\r\n                        allowClear\r\n                        onChange={(e) =>\r\n                          setEditModalObj((prevState) => ({\r\n                            ...prevState,\r\n                            description: e.target.value,\r\n                          }))\r\n                        }\r\n                        maxLength={500}\r\n                        value={editModalObj.description}\r\n                      />\r\n                      <div className='addTaskModalSingleRow'>\r\n                        <div className='dueDateAddModal'>\r\n                          <p>Due Date</p>\r\n                          <DatePicker\r\n                            format={'DD/MM/YYYY'}\r\n                            onChange={(e, dateString) =>\r\n                              setEditModalObj((prevState) => ({\r\n                                ...prevState,\r\n                                dueDate: dateString,\r\n                              }))\r\n                            }\r\n                            value={\r\n                              editModalObj.dueDate\r\n                                ? moment(editModalObj.dueDate, 'DD/MM/YYYY')\r\n                                : ''\r\n                            }\r\n                          />\r\n                        </div>\r\n                        <div className='priorityAddModal'>\r\n                          <p>Priority</p>\r\n                          <Dropdown.Button\r\n                            overlay={menu}\r\n                            icon={<DownOutlined />}\r\n                          >\r\n                            {editModalObj.priority\r\n                              ? editModalObj.priority\r\n                              : 'Select Priority'}\r\n                          </Dropdown.Button>\r\n                        </div>\r\n                      </div>\r\n                    </Modal>\r\n                    <Button\r\n                      type='primary'\r\n                      icon={<EditOutlined />}\r\n                      onClick={() => {\r\n                        setEditModalObj({ ...element });\r\n                        setEditModal(true);\r\n                      }}\r\n                    />\r\n                    {element.currentState === 'done' ? (\r\n                      <Button\r\n                        style={{ backgroundColor: '#0079ba', color: 'white' }}\r\n                        shape='round'\r\n                        onClick={() =>\r\n                          OnEdit({ ...element, currentState: 'open' })\r\n                        }\r\n                      >\r\n                        Re-open\r\n                      </Button>\r\n                    ) : (\r\n                      <Button\r\n                        style={{ backgroundColor: '#00c932', color: 'white' }}\r\n                        shape='round'\r\n                        onClick={() =>\r\n                          OnEdit({ ...element, currentState: 'done' })\r\n                        }\r\n                      >\r\n                        Done\r\n                      </Button>\r\n                    )}\r\n                    <Popconfirm\r\n                      title='Are you sure delete this task?'\r\n                      onConfirm={() => OnDelete(element)}\r\n                      okText='Yes'\r\n                      cancelText='No'\r\n                    >\r\n                      <Button type='danger' icon={<DeleteOutlined />} />\r\n                    </Popconfirm>\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            ))\r\n          : groupArray.map((groupHeader, k) => (\r\n              <Fragment key={k}>\r\n                <tr className='textAlignCenter'>\r\n                  <td className='borderRight0'></td>\r\n                  <td className='border0'></td>\r\n                  <td className='border0 fontBold textUnderline'>\r\n                    {groupHeader}\r\n                  </td>\r\n                  <td className='border0'></td>\r\n                  <td className='borderLeft0'></td>\r\n                </tr>\r\n                {groupByPrevState === 'priority'\r\n                  ? listTask.map((element, key) =>\r\n                      element.priority === groupHeader ? (\r\n                        <tr\r\n                          key={key}\r\n                          style={\r\n                            element.currentState === 'done'\r\n                              ? { textDecoration: 'line-through' }\r\n                              : {}\r\n                          }\r\n                        >\r\n                          <td\r\n                            onClick={() => {\r\n                              setShowViewModal(true);\r\n                              setSelectedTask(element);\r\n                            }}\r\n                          >\r\n                            {element.title}\r\n                          </td>\r\n                          <td\r\n                            onClick={() => {\r\n                              setShowViewModal(true);\r\n                              setSelectedTask(element);\r\n                            }}\r\n                          >\r\n                            {element.priority}\r\n                          </td>\r\n                          <td\r\n                            onClick={() => {\r\n                              setShowViewModal(true);\r\n                              setSelectedTask(element);\r\n                            }}\r\n                          >\r\n                            {element.createdAt}\r\n                          </td>\r\n                          <td\r\n                            onClick={() => {\r\n                              setShowViewModal(true);\r\n                              setSelectedTask(element);\r\n                            }}\r\n                          >\r\n                            {element.dueDate}\r\n                          </td>\r\n                          <td>\r\n                            <div className='flexEvenly'>\r\n                              <Modal\r\n                                title='Edit Task'\r\n                                visible={editModal}\r\n                                onOk={() => OnEdit({ ...editModalObj })}\r\n                                onCancel={() => setEditModal(false)}\r\n                                footer={[\r\n                                  <Button\r\n                                    key='back'\r\n                                    type='ghost'\r\n                                    onClick={() => setEditModal(false)}\r\n                                  >\r\n                                    Cancel\r\n                                  </Button>,\r\n                                  <Button\r\n                                    key='submit'\r\n                                    type='primary'\r\n                                    onClick={() => OnEdit({ ...editModalObj })}\r\n                                  >\r\n                                    Save\r\n                                  </Button>,\r\n                                ]}\r\n                                className='addTaskModal'\r\n                              >\r\n                                <p>Title</p>\r\n                                <Input\r\n                                  allowClear\r\n                                  onChange={(e) =>\r\n                                    setEditModalObj((prevState) => ({\r\n                                      ...prevState,\r\n                                      title: e.target.value,\r\n                                    }))\r\n                                  }\r\n                                  maxLength={140}\r\n                                  value={editModalObj.title}\r\n                                />\r\n                                <p>Description</p>\r\n                                <TextArea\r\n                                  placeholder='Add Description Here'\r\n                                  allowClear\r\n                                  onChange={(e) =>\r\n                                    setEditModalObj((prevState) => ({\r\n                                      ...prevState,\r\n                                      description: e.target.value,\r\n                                    }))\r\n                                  }\r\n                                  maxLength={500}\r\n                                  value={editModalObj.description}\r\n                                />\r\n                                <div className='addTaskModalSingleRow'>\r\n                                  <div className='dueDateAddModal'>\r\n                                    <p>Due Date</p>\r\n                                    <DatePicker\r\n                                      format={'DD/MM/YYYY'}\r\n                                      onChange={(e, dateString) =>\r\n                                        setEditModalObj((prevState) => ({\r\n                                          ...prevState,\r\n                                          dueDate: dateString,\r\n                                        }))\r\n                                      }\r\n                                      value={\r\n                                        editModalObj.dueDate\r\n                                          ? moment(\r\n                                              editModalObj.dueDate,\r\n                                              'DD/MM/YYYY'\r\n                                            )\r\n                                          : ''\r\n                                      }\r\n                                    />\r\n                                  </div>\r\n                                  <div className='priorityAddModal'>\r\n                                    <p>Priority</p>\r\n                                    <Dropdown.Button\r\n                                      overlay={menu}\r\n                                      icon={<DownOutlined />}\r\n                                    >\r\n                                      {editModalObj.priority\r\n                                        ? editModalObj.priority\r\n                                        : 'Select Priority'}\r\n                                    </Dropdown.Button>\r\n                                  </div>\r\n                                </div>\r\n                              </Modal>\r\n                              <Button\r\n                                type='primary'\r\n                                icon={<EditOutlined />}\r\n                                onClick={() => {\r\n                                  setEditModalObj({ ...element });\r\n                                  setEditModal(true);\r\n                                }}\r\n                              />\r\n                              {element.currentState === 'done' ? (\r\n                                <Button\r\n                                  style={{\r\n                                    backgroundColor: '#0079ba',\r\n                                    color: 'white',\r\n                                  }}\r\n                                  shape='round'\r\n                                  onClick={() =>\r\n                                    OnEdit({ ...element, currentState: 'open' })\r\n                                  }\r\n                                >\r\n                                  Re-open\r\n                                </Button>\r\n                              ) : (\r\n                                <Button\r\n                                  style={{\r\n                                    backgroundColor: '#00c932',\r\n                                    color: 'white',\r\n                                  }}\r\n                                  shape='round'\r\n                                  onClick={() =>\r\n                                    OnEdit({ ...element, currentState: 'done' })\r\n                                  }\r\n                                >\r\n                                  Done\r\n                                </Button>\r\n                              )}\r\n                              <Popconfirm\r\n                                title='Are you sure delete this task?'\r\n                                onConfirm={() => OnDelete(element)}\r\n                                okText='Yes'\r\n                                cancelText='No'\r\n                              >\r\n                                <Button\r\n                                  type='danger'\r\n                                  icon={<DeleteOutlined />}\r\n                                />\r\n                              </Popconfirm>\r\n                            </div>\r\n                          </td>\r\n                        </tr>\r\n                      ) : null\r\n                    )\r\n                  : groupByPrevState === 'createdOn'\r\n                  ? listTask.map((element, key) =>\r\n                      element.createdAt === groupHeader ? (\r\n                        <tr\r\n                          key={key}\r\n                          style={\r\n                            element.currentState === 'done'\r\n                              ? { textDecoration: 'line-through' }\r\n                              : {}\r\n                          }\r\n                        >\r\n                          <td\r\n                            onClick={() => {\r\n                              setShowViewModal(true);\r\n                              setSelectedTask(element);\r\n                            }}\r\n                          >\r\n                            {element.title}\r\n                          </td>\r\n                          <td\r\n                            onClick={() => {\r\n                              setShowViewModal(true);\r\n                              setSelectedTask(element);\r\n                            }}\r\n                          >\r\n                            {element.priority}\r\n                          </td>\r\n                          <td\r\n                            onClick={() => {\r\n                              setShowViewModal(true);\r\n                              setSelectedTask(element);\r\n                            }}\r\n                          >\r\n                            {element.createdAt}\r\n                          </td>\r\n                          <td\r\n                            onClick={() => {\r\n                              setShowViewModal(true);\r\n                              setSelectedTask(element);\r\n                            }}\r\n                          >\r\n                            {element.dueDate}\r\n                          </td>\r\n                          <td>\r\n                            <div className='flexEvenly'>\r\n                              <Modal\r\n                                title='Edit Task'\r\n                                visible={editModal}\r\n                                onOk={() => OnEdit({ ...editModalObj })}\r\n                                onCancel={() => setEditModal(false)}\r\n                                footer={[\r\n                                  <Button\r\n                                    key='back'\r\n                                    type='ghost'\r\n                                    onClick={() => setEditModal(false)}\r\n                                  >\r\n                                    Cancel\r\n                                  </Button>,\r\n                                  <Button\r\n                                    key='submit'\r\n                                    type='primary'\r\n                                    onClick={() => OnEdit({ ...editModalObj })}\r\n                                  >\r\n                                    Save\r\n                                  </Button>,\r\n                                ]}\r\n                                className='addTaskModal'\r\n                              >\r\n                                <p>Title</p>\r\n                                <Input\r\n                                  allowClear\r\n                                  onChange={(e) =>\r\n                                    setEditModalObj((prevState) => ({\r\n                                      ...prevState,\r\n                                      title: e.target.value,\r\n                                    }))\r\n                                  }\r\n                                  maxLength={140}\r\n                                  value={editModalObj.title}\r\n                                />\r\n                                <p>Description</p>\r\n                                <TextArea\r\n                                  placeholder='Add Description Here'\r\n                                  allowClear\r\n                                  onChange={(e) =>\r\n                                    setEditModalObj((prevState) => ({\r\n                                      ...prevState,\r\n                                      description: e.target.value,\r\n                                    }))\r\n                                  }\r\n                                  maxLength={500}\r\n                                  value={editModalObj.description}\r\n                                />\r\n                                <div className='addTaskModalSingleRow'>\r\n                                  <div className='dueDateAddModal'>\r\n                                    <p>Due Date</p>\r\n                                    <DatePicker\r\n                                      format={'DD/MM/YYYY'}\r\n                                      onChange={(e, dateString) =>\r\n                                        setEditModalObj((prevState) => ({\r\n                                          ...prevState,\r\n                                          dueDate: dateString,\r\n                                        }))\r\n                                      }\r\n                                      value={\r\n                                        editModalObj.dueDate\r\n                                          ? moment(\r\n                                              editModalObj.dueDate,\r\n                                              'DD/MM/YYYY'\r\n                                            )\r\n                                          : ''\r\n                                      }\r\n                                    />\r\n                                  </div>\r\n                                  <div className='priorityAddModal'>\r\n                                    <p>Priority</p>\r\n                                    <Dropdown.Button\r\n                                      overlay={menu}\r\n                                      icon={<DownOutlined />}\r\n                                    >\r\n                                      {editModalObj.priority\r\n                                        ? editModalObj.priority\r\n                                        : 'Select Priority'}\r\n                                    </Dropdown.Button>\r\n                                  </div>\r\n                                </div>\r\n                              </Modal>\r\n                              <Button\r\n                                type='primary'\r\n                                icon={<EditOutlined />}\r\n                                onClick={() => {\r\n                                  setEditModalObj({ ...element });\r\n                                  setEditModal(true);\r\n                                }}\r\n                              />\r\n                              {element.currentState === 'done' ? (\r\n                                <Button\r\n                                  style={{\r\n                                    backgroundColor: '#0079ba',\r\n                                    color: 'white',\r\n                                  }}\r\n                                  shape='round'\r\n                                  onClick={() =>\r\n                                    OnEdit({ ...element, currentState: 'open' })\r\n                                  }\r\n                                >\r\n                                  Re-open\r\n                                </Button>\r\n                              ) : (\r\n                                <Button\r\n                                  style={{\r\n                                    backgroundColor: '#00c932',\r\n                                    color: 'white',\r\n                                  }}\r\n                                  shape='round'\r\n                                  onClick={() =>\r\n                                    OnEdit({ ...element, currentState: 'done' })\r\n                                  }\r\n                                >\r\n                                  Done\r\n                                </Button>\r\n                              )}\r\n                              <Popconfirm\r\n                                title='Are you sure delete this task?'\r\n                                onConfirm={() => OnDelete(element)}\r\n                                okText='Yes'\r\n                                cancelText='No'\r\n                              >\r\n                                <Button\r\n                                  type='danger'\r\n                                  icon={<DeleteOutlined />}\r\n                                />\r\n                              </Popconfirm>\r\n                            </div>\r\n                          </td>\r\n                        </tr>\r\n                      ) : null\r\n                    )\r\n                  : listTask.map((element, key) =>\r\n                      element.dueDate === groupHeader ? (\r\n                        <tr\r\n                          key={key}\r\n                          style={\r\n                            element.currentState === 'done'\r\n                              ? { textDecoration: 'line-through' }\r\n                              : {}\r\n                          }\r\n                        >\r\n                          <td\r\n                            onClick={() => {\r\n                              setShowViewModal(true);\r\n                              setSelectedTask(element);\r\n                            }}\r\n                          >\r\n                            {element.title}\r\n                          </td>\r\n                          <td\r\n                            onClick={() => {\r\n                              setShowViewModal(true);\r\n                              setSelectedTask(element);\r\n                            }}\r\n                          >\r\n                            {element.priority}\r\n                          </td>\r\n                          <td\r\n                            onClick={() => {\r\n                              setShowViewModal(true);\r\n                              setSelectedTask(element);\r\n                            }}\r\n                          >\r\n                            {element.createdAt}\r\n                          </td>\r\n                          <td\r\n                            onClick={() => {\r\n                              setShowViewModal(true);\r\n                              setSelectedTask(element);\r\n                            }}\r\n                          >\r\n                            {element.dueDate}\r\n                          </td>\r\n                          <td>\r\n                            <div className='flexEvenly'>\r\n                              <Modal\r\n                                title='Edit Task'\r\n                                visible={editModal}\r\n                                onOk={() => OnEdit({ ...editModalObj })}\r\n                                onCancel={() => setEditModal(false)}\r\n                                footer={[\r\n                                  <Button\r\n                                    key='back'\r\n                                    type='ghost'\r\n                                    onClick={() => setEditModal(false)}\r\n                                  >\r\n                                    Cancel\r\n                                  </Button>,\r\n                                  <Button\r\n                                    key='submit'\r\n                                    type='primary'\r\n                                    onClick={() => OnEdit({ ...editModalObj })}\r\n                                  >\r\n                                    Save\r\n                                  </Button>,\r\n                                ]}\r\n                                className='addTaskModal'\r\n                              >\r\n                                <p>Title</p>\r\n                                <Input\r\n                                  allowClear\r\n                                  onChange={(e) =>\r\n                                    setEditModalObj((prevState) => ({\r\n                                      ...prevState,\r\n                                      title: e.target.value,\r\n                                    }))\r\n                                  }\r\n                                  maxLength={140}\r\n                                  value={editModalObj.title}\r\n                                />\r\n                                <p>Description</p>\r\n                                <TextArea\r\n                                  placeholder='Add Description Here'\r\n                                  allowClear\r\n                                  onChange={(e) =>\r\n                                    setEditModalObj((prevState) => ({\r\n                                      ...prevState,\r\n                                      description: e.target.value,\r\n                                    }))\r\n                                  }\r\n                                  maxLength={500}\r\n                                  value={editModalObj.description}\r\n                                />\r\n                                <div className='addTaskModalSingleRow'>\r\n                                  <div className='dueDateAddModal'>\r\n                                    <p>Due Date</p>\r\n                                    <DatePicker\r\n                                      format={'DD/MM/YYYY'}\r\n                                      onChange={(e, dateString) =>\r\n                                        setEditModalObj((prevState) => ({\r\n                                          ...prevState,\r\n                                          dueDate: dateString,\r\n                                        }))\r\n                                      }\r\n                                      value={\r\n                                        editModalObj.dueDate\r\n                                          ? moment(\r\n                                              editModalObj.dueDate,\r\n                                              'DD/MM/YYYY'\r\n                                            )\r\n                                          : ''\r\n                                      }\r\n                                    />\r\n                                  </div>\r\n                                  <div className='priorityAddModal'>\r\n                                    <p>Priority</p>\r\n                                    <Dropdown.Button\r\n                                      overlay={menu}\r\n                                      icon={<DownOutlined />}\r\n                                    >\r\n                                      {editModalObj.priority\r\n                                        ? editModalObj.priority\r\n                                        : 'Select Priority'}\r\n                                    </Dropdown.Button>\r\n                                  </div>\r\n                                </div>\r\n                              </Modal>\r\n                              <Button\r\n                                type='primary'\r\n                                icon={<EditOutlined />}\r\n                                onClick={() => {\r\n                                  setEditModalObj({ ...element });\r\n                                  setEditModal(true);\r\n                                }}\r\n                              />\r\n                              {element.currentState === 'done' ? (\r\n                                <Button\r\n                                  style={{\r\n                                    backgroundColor: '#0079ba',\r\n                                    color: 'white',\r\n                                  }}\r\n                                  shape='round'\r\n                                  onClick={() =>\r\n                                    OnEdit({ ...element, currentState: 'open' })\r\n                                  }\r\n                                >\r\n                                  Re-open\r\n                                </Button>\r\n                              ) : (\r\n                                <Button\r\n                                  style={{\r\n                                    backgroundColor: '#00c932',\r\n                                    color: 'white',\r\n                                  }}\r\n                                  shape='round'\r\n                                  onClick={() =>\r\n                                    OnEdit({ ...element, currentState: 'done' })\r\n                                  }\r\n                                >\r\n                                  Done\r\n                                </Button>\r\n                              )}\r\n                              <Popconfirm\r\n                                title='Are you sure delete this task?'\r\n                                onConfirm={() => OnDelete(element)}\r\n                                okText='Yes'\r\n                                cancelText='No'\r\n                              >\r\n                                <Button\r\n                                  type='danger'\r\n                                  icon={<DeleteOutlined />}\r\n                                />\r\n                              </Popconfirm>\r\n                            </div>\r\n                          </td>\r\n                        </tr>\r\n                      ) : null\r\n                    )}\r\n              </Fragment>\r\n            ))}\r\n      </table>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  filteredTask: state.filteredTask,\r\n  task: state.task,\r\n});\r\n\r\nexport default connect(mapStateToProps, { OnEdit, OnFilterTask, OnDelete })(\r\n  AllTask\r\n);\r\n","import React from 'react';\r\n// ant design\r\nimport { Tabs } from 'antd';\r\n// redux\r\nimport { connect } from 'react-redux';\r\n// actions\r\nimport { OnFilterTask } from '../actions/actions';\r\nimport AllTask from './AllTask';\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nconst TaskListMain = ({ OnFilterTask }) => {\r\n  const callback = (key) => {\r\n    OnFilterTask({ currentStatus: key, groupBy: 'none', search: '' });\r\n  };\r\n  return (\r\n    <Tabs defaultActiveKey='all' onChange={callback} style={{ width: '100%' }}>\r\n      <TabPane tab='All' key='all'>\r\n        <AllTask />\r\n      </TabPane>\r\n      <TabPane tab='Pending' key='pending'>\r\n        <AllTask />\r\n      </TabPane>\r\n      <TabPane tab='Completed' key='completed'>\r\n        <AllTask />\r\n      </TabPane>\r\n    </Tabs>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({});\r\n\r\nexport default connect(mapStateToProps, { OnFilterTask })(TaskListMain);\r\n","import React, { useState, useEffect } from 'react';\r\n\r\n// style\r\nimport '../App.css';\r\n\r\n// ant design ui\r\nimport {\r\n  Button,\r\n  Input,\r\n  Menu,\r\n  Dropdown,\r\n  message,\r\n  Modal,\r\n  DatePicker,\r\n} from 'antd';\r\nimport { PlusOutlined, DownOutlined } from '@ant-design/icons';\r\nimport moment from 'moment';\r\n\r\n// redux\r\nimport { connect } from 'react-redux';\r\n// actions\r\nimport { OnAdd } from '../actions/actions';\r\n\r\nconst { TextArea } = Input;\r\n\r\nconst AddTaskButton = ({ OnAdd, task }) => {\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [modalLoading, setModalLoading] = useState(false);\r\n  const [addTask, setAddTask] = useState({\r\n    title: '',\r\n    description: '',\r\n    dueDate: '',\r\n    priority: 'none',\r\n    createdAt: '',\r\n    currentState: 'open',\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (task.some((element) => element.title === addTask.title)) {\r\n      setModalVisible(false);\r\n      setAddTask({\r\n        title: '',\r\n        description: '',\r\n        dueDate: '',\r\n        priority: 'none',\r\n        createdAt: '',\r\n        currentState: 'open',\r\n      });\r\n      setModalLoading(false);\r\n      message.success('Task created successfully');\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [task]);\r\n\r\n  const onTitleChange = (e) => {\r\n    setAddTask((prevState) => ({\r\n      ...prevState,\r\n      title: e.target.value,\r\n    }));\r\n  };\r\n\r\n  const onDescriptionChange = (e) => {\r\n    setAddTask((prevState) => ({\r\n      ...prevState,\r\n      description: e.target.value,\r\n    }));\r\n  };\r\n\r\n  const onDueDateChange = (e, dateString) => {\r\n    setAddTask((prevState) => ({\r\n      ...prevState,\r\n      dueDate: dateString,\r\n    }));\r\n  };\r\n\r\n  function handleMenuClick(e) {\r\n    setAddTask((prevState) => ({\r\n      ...prevState,\r\n      priority: e.key,\r\n    }));\r\n  }\r\n\r\n  const menu = (\r\n    <Menu onClick={handleMenuClick}>\r\n      <Menu.Item key='none'>None</Menu.Item>\r\n      <Menu.Item key='low'>Low</Menu.Item>\r\n      <Menu.Item key='medium'>Medium</Menu.Item>\r\n      <Menu.Item key='high'>High</Menu.Item>\r\n    </Menu>\r\n  );\r\n\r\n  const handleSaveModal = () => {\r\n    if (addTask.title.length < 10) {\r\n      message.error('Please enter Title more than 10 characters');\r\n    }\r\n    if (addTask.description.length < 10) {\r\n      message.error('Please enter Description more than 10 characters');\r\n    }\r\n    if (addTask.description.length > 9 && addTask.title.length > 9) {\r\n      let currentDate = new Date(Date.now());\r\n      let formattedDate = currentDate.toLocaleDateString('en-IN');\r\n      let dataToAdd = {\r\n        ...addTask,\r\n        id: Date.now().toString(),\r\n        createdAt: formattedDate,\r\n        currentState: 'open',\r\n      };\r\n      setModalLoading(true);\r\n      OnAdd(dataToAdd);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        type='primary'\r\n        shape='circle'\r\n        size='large'\r\n        icon={<PlusOutlined />}\r\n        onClick={(e) => setModalVisible(true)}\r\n      />\r\n      <Modal\r\n        title='Add Task'\r\n        visible={modalVisible}\r\n        onOk={handleSaveModal}\r\n        onCancel={() => setModalVisible(false)}\r\n        confirmLoading={modalLoading}\r\n        footer={[\r\n          <Button\r\n            key='back'\r\n            type='ghost'\r\n            onClick={() => setModalVisible(false)}\r\n          >\r\n            Cancel\r\n          </Button>,\r\n          <Button key='submit' type='primary' onClick={handleSaveModal}>\r\n            Save\r\n          </Button>,\r\n        ]}\r\n        className='addTaskModal'\r\n      >\r\n        <p>Title</p>\r\n        <Input\r\n          placeholder='Add title here'\r\n          allowClear\r\n          onChange={onTitleChange}\r\n          maxLength={140}\r\n          value={addTask.title}\r\n        />\r\n        <p>Description</p>\r\n        <TextArea\r\n          placeholder='Add Description Here'\r\n          allowClear\r\n          onChange={onDescriptionChange}\r\n          maxLength={500}\r\n          value={addTask.description}\r\n        />\r\n        <div className='addTaskModalSingleRow'>\r\n          <div className='dueDateAddModal'>\r\n            <p>Due Date</p>\r\n            <DatePicker\r\n              format={'DD/MM/YYYY'}\r\n              onChange={onDueDateChange}\r\n              value={\r\n                addTask.dueDate ? moment(addTask.dueDate, 'DD/MM/YYYY') : ''\r\n              }\r\n            />\r\n          </div>\r\n          <div className='priorityAddModal'>\r\n            <p>Priority</p>\r\n            <Dropdown.Button overlay={menu} icon={<DownOutlined />}>\r\n              {addTask.priority ? addTask.priority : 'Select Priority'}\r\n            </Dropdown.Button>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({ task: state.task });\r\n\r\nexport default connect(mapStateToProps, { OnAdd })(AddTaskButton);\r\n","import React from 'react';\nimport { Provider } from 'react-redux';\n\n//Redux\nimport store from './store';\n\n// styles\nimport './App.css';\n\n//Components\nimport GroupSearchDiv from './Components/GroupSearchDiv';\nimport TaskListMain from './Components/TaskListMain';\nimport AddTaskButton from './Components/AddTaskButton';\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <div className='App'>\n        <div className='header'>\n          <h1>ToDo App</h1>\n          <AddTaskButton />\n        </div>\n        <div className='textBoxDiv'>\n          <GroupSearchDiv />\n        </div>\n        <div className='taskListMainDiv'>\n          <TaskListMain />\n        </div>\n      </div>\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}